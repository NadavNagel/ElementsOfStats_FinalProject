import numpy as npimport pandas as pdfrom sklearn.model_selection import train_test_splitimport models as modelsfrom sklearn.metrics import mean_squared_errorimport mathfrom sklearn.neighbors import KNeighborsClassifierimport more_itertoolsimport randomimport operatordef load_and_set_data():    '''    loads and set the data    :return:    '''    train = {}    test = {}    movie_titles = pd.read_csv('movie_titles.txt', sep=",", header=None)    train['y_rating'] = pd.read_csv('train_y_rating.txt', delimiter=r"\s+", header=None)    train['y_date'] = pd.read_csv('train_y_date.txt', delimiter=r"\s+", header=None)    train['X_ratings'] = pd.read_csv('train_ratings_all.txt', delimiter=r"\s+", header=None)    train['X_dates'] = pd.read_csv('train_dates_all.txt', delimiter=r"\s+", header=None)    test['y_date'] = pd.read_csv('test_y_date.txt', delimiter=r"\s+", header=None)    test['X_ratings'] = pd.read_csv('test_ratings_all.txt', delimiter=r"\s+", header=None)    test['X_dates'] = pd.read_csv('test_dates_all.txt', delimiter=r"\s+", header=None)    train['X_ratings'].columns = movie_titles.iloc[:, ]    test['X_ratings'].columns = movie_titles.iloc[:, ]    return movie_titles, train, testdef clean_data(train, test):    """    remove users with variance lower then the threshold (in ratings)    :param test:    :param train:    :param threshold:    :return:    """    new_fitcher = get_fitcher_from_row_data(train, test)    set_dates_feat(train, new_fitcher, name='train')    set_dates_feat(test, new_fitcher, name='test')    fill_missing(train, test)    # train['X_ratings'] = train['X_ratings'].sub(train['X_ratings'].mean(axis=0), axis=1)    # train['X_ratings'] = train['X_ratings'].sub(train['X_ratings'].mean(axis=0), axis=1)    # train['X_ratings'] = train['X_ratings'].sub(train['X_ratings'].mean(axis=1), axis=0)    # test['X_ratings'] = test['X_ratings'].sub(test['X_ratings'].mean(axis=0), axis=1)    add_correlated_avg(new_fitcher, train, test)    for key, value in new_fitcher['train'].items():        train['X_ratings'][key] = value    for key, value in new_fitcher['test'].items():        test['X_ratings'][key] = value    add_Std(train, test)    add_if_less_150_days(train, test)def add_Std(train, test):    train['X_ratings']['Std'] = train['X_ratings'][train['X_ratings'].columns[0:99]].std(axis=1)    test['X_ratings']['Std'] = test['X_ratings'][test['X_ratings'].columns[0:99]].std(axis=1)def add_if_less_150_days(train, test):    train['X_ratings']['less_1500'] = train['y_date'] < 1500    test['X_ratings']['less_1500'] = test['y_date'] < 1500def get_fitcher_from_row_data(train, test):    new_fitcher = {'train': {}, 'test': {}}    get_avg_by_year_per_user(train['X_ratings'], new_fitcher['train'])    get_avg_by_year_per_user(test['X_ratings'], new_fitcher['test'])    find_corr_with_miss_colinieanis(train['X_ratings'], train['y_rating'], new_fitcher, n_high=5, n_low=3)    get_AVGandMissingValues(new_fitcher, test, train)    return new_fitcherdef get_AVGandMissingValues(new_fitcher, test, train):    df_test = test['X_ratings'].copy()    df_train = train['X_ratings'].copy()    df_test = df_test.replace(0, np.nan)    df_train = df_train.replace(0, np.nan)    new_fitcher['test']['AVG'] = df_test.mean(axis=1)    new_fitcher['test']['missing_Value'] = test['X_ratings'][test['X_ratings'] == 0].count(axis=1)    new_fitcher['train']['AVG'] = df_train.mean(axis=1)    new_fitcher['train']['missing_Value'] = train['X_ratings'][train['X_ratings'] == 0].count(axis=1)def set_dates_feat(data, new_fitcher, name='train'):    df_ratings_all = data['X_ratings'].copy()    df_y_date = data['y_date'].copy()    df_dates_all = data['X_dates'].copy()    for i in range(df_dates_all.shape[1]):        df_y_date[i] = df_y_date[0]    df_dates_all = df_dates_all.replace(0, np.nan)    seen_on_same_day = ((df_dates_all - df_y_date) == 0)    rating_on_same_day = pd.DataFrame(np.array(seen_on_same_day) * np.array(df_ratings_all))    rating_on_same_day = rating_on_same_day.replace(0, np.nan)    dayAVG = rating_on_same_day.mean(axis=1)    new_fitcher[name]['day average'] = dayAVG.replace(np.nan, 0)    new_fitcher[name]['movies_on_day'] = seen_on_same_day.sum(axis=1)    daySTD = rating_on_same_day.std(axis=1)    new_fitcher[name]['day std'] = daySTD.replace(np.nan, 0)    seen_on_same_week = (abs(df_dates_all - df_y_date) < 7)    rating_on_same_week = pd.DataFrame(np.array(seen_on_same_week) * np.array(df_ratings_all))    rating_on_same_week = rating_on_same_week.replace(0, np.nan)    weekAVG = rating_on_same_week.mean(axis=1)    new_fitcher[name]['week average'] = weekAVG.replace(np.nan, 0)    weekSTD = rating_on_same_week.std(axis=1)    new_fitcher[name]['week std'] = weekSTD.replace(np.nan, 0)    seen_on_same_month = (abs(df_dates_all - df_y_date) < 30)    rating_on_same_month = pd.DataFrame(np.array(seen_on_same_month) * np.array(df_ratings_all))    rating_on_same_month = rating_on_same_month.replace(0, np.nan)    monthAVG = rating_on_same_month.mean(axis=1)    new_fitcher[name]['month average'] = monthAVG.replace(np.nan, 0)    monthSTD = rating_on_same_month.std(axis=1)    new_fitcher[name]['month std'] = monthSTD.replace(np.nan, 0)    #    #    new_fitcher[name]['date'] = df_y_date[0]def fill_missing(train, test):    train['X_ratings']['type'] = 'train'    test['X_ratings']['type'] = 'test'    df = pd.concat([train['X_ratings'], test['X_ratings']])    # df = set_column_order(df)    for i in range(14, df.shape[1] - 1):        column_name = df.columns[i]        train_temp = df[df[column_name] > 0].iloc[:, list(range(0, i))]        test_temp = df[df[column_name] == 0].iloc[:, list(range(0, i))]        y_temp = df[df[column_name] > 0].iloc[:, [i]]        if (train_temp.shape[0] == 0) | (test_temp.shape[0] == 0):            print('No missing values in {} column, number: {}'.format(column_name, i))            continue        fill_na = lin_model_runner(train_temp, test_temp, y_temp)        df[column_name][df[column_name] == 0] = fill_na        df[column_name][df[column_name] > 5] = 5        df[column_name][df[column_name] < 1] = 1        train['X_ratings'] = df[df['type'] == 'train']        test['X_ratings'] = df[df['type'] == 'test']    assert len(test['X_ratings']) == 2931    assert len(train['X_ratings']) == 10000    train['X_ratings'].drop('type', axis=1, inplace=True)    test['X_ratings'].drop('type', axis=1, inplace=True)def split_train_dev(data, labels, test_size=0.25):    x_train, x_dev, y_train, y_dev = train_test_split(data, labels, test_size=test_size)    return x_train, x_dev, y_train, y_devdef lin_model_runner(x_train, x_test, y_train, method='Lasso', alpha=0):    clf = models.lin_model(x_train, y_train, method=method, alpha=alpha)    preds = clf.predict(x_test)    if method == 'Lasso':        return list(more_itertools.flatten([preds]))    return list(more_itertools.flatten(preds))def set_column_order(df):    columns_order = df.astype(bool).sum(axis=0).sort_values(ascending=False).index.tolist()    columns_order = columns_order[1:]    columns_order.append('type')    df = df[columns_order]    return dfdef get_avg_by_year_per_user(df, new_fitcher):    """    :param df_ratings_all:    :return:    """    avg_year_dict = {1991: 'before',                     (1991, 2000): 'between',                     2000: 'after'}    df = df.replace(0, np.NaN).copy()    for year in avg_year_dict.keys():        if avg_year_dict[year] == 'before':            columns_list = [i for i in df.columns[:99] if int(i[0]) < year]        elif avg_year_dict[year] == 'between':            columns_list = [i for i in df.columns[:99] if year[0] <= int(i[0]) <= year[1]]        elif avg_year_dict[year] == 'after':            columns_list = [i for i in df.columns[:99] if int(i[0]) > year]        # avg_year_dict[year] = [df[columns_list].mean(axis=1), avg_year_dict[year]]        new_fitcher[year] = df[columns_list].mean(axis=1)def find_corr_with_miss_colinieanis(df_train, label, new_fitcher, n_high=7, n_low=8):    col_list = df_train.columns    corr_dic = {}    for column in col_list:        corr_temp = label[0].corr(df_train[column])        corr_dic[column] = corr_temp    corr_dic = sorted(corr_dic.items(), key=operator.itemgetter(1))    corr_dic = [name[0] for name in corr_dic]    high_corr_list = corr_dic[-n_high:]    low_corr_list = corr_dic[:n_low]    new_fitcher['high_correlated'] = high_corr_list    new_fitcher['low_correlated'] = low_corr_listdef add_correlated_avg(new_fitcher, train, test):    high_list = new_fitcher['high_correlated']    low_list = new_fitcher['low_correlated']    train['high_corr'] = train['X_ratings'][high_list].mean(axis=1)    test['high_corr'] = test['X_ratings'][high_list].mean(axis=1)    del new_fitcher['high_correlated']    del new_fitcher['low_correlated']