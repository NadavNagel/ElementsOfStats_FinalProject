import numpy as npimport matplotlib.pyplot as pltimport pandas as pdfrom sklearn import linear_modelfrom catboost import CatBoostRegressorimport mathfrom sklearn.metrics import mean_squared_errorfrom sklearn.neighbors import KNeighborsRegressorfrom sklearn.metrics.pairwise import cosine_similarityfrom sklearn.neighbors import DistanceMetricimport lightgbm as lgbdef lin_model(x_train, y_train, method='normal', alpha=0):    if method == 'normal':        clf_reg = linear_model.LinearRegression()    if method == 'Lasso':        clf_reg = linear_model.Lasso(alpha=alpha)    if method == 'Ridge':        clf_reg = linear_model.Ridge(alpha=alpha)    clf_reg.fit(x_train, y_train)    return clf_regdef run_knn_manhattan(x_train, x_dev, y_train, y_dev, k=50):    '''    :param x_train:    :param x_dev:    :param y_train:    :param y_dev:    :param k:    :return:    '''    print('\n')    print('Training a KNN model with manhattan for k = {}'.format(k))    dist = DistanceMetric.get_metric('manhattan')    x_train_temp = x_train.reset_index(drop=True)    x_dev_temp = x_dev.reset_index(drop=True)    y_train_temp = y_train.reset_index(drop=True)    y_dev_temp = y_dev.reset_index(drop=True)    preds_dev = np.zeros((y_dev_temp.shape[0], 1))    similarity_dist = dist.pairwise(x_train_temp, x_dev_temp)    for i in range(similarity_dist.shape[1]):        min_ind_dev = similarity_dist[:, 1].argsort()[:k]        preds_dev[i] = np.mean(y_train_temp[y_train_temp.index.isin(min_ind_dev)])    mse_dev_reg = math.sqrt(mean_squared_error(y_dev_temp, preds_dev))    print('RMSE on DEV is: {}'.format(mse_dev_reg))def run_knn_model(x_train, x_dev, y_train, y_dev, k):    clf = KNeighborsRegressor(n_neighbors=k)    clf.fit(x_train, y_train)    pred_train = clf.predict(x_train)    pred_dev = clf.predict(x_dev)    rmse_train = math.sqrt(mean_squared_error(y_train, pred_train))    rmse_dev = math.sqrt(mean_squared_error(y_dev, pred_dev))    return clf, rmse_train, rmse_devdef run_knn_cosine(x_train, x_dev, y_train, y_dev, k):    clf = KNeighborsRegressor(n_neighbors=k, metric='cosine')    clf.fit(x_train, y_train)    pred_train = clf.predict(x_train)    pred_dev = clf.predict(x_dev)    rmse_train = math.sqrt(mean_squared_error(y_train, pred_train))    rmse_dev = math.sqrt(mean_squared_error(y_dev, pred_dev))    return clf, rmse_train, rmse_devdef run_knn_euclidiean(x_train, x_dev, y_train, y_dev, k):    clf = KNeighborsRegressor(n_neighbors=k, metric='euclidean')    clf.fit(x_train, y_train)    pred_train = clf.predict(x_train)    pred_dev = clf.predict(x_dev)    rmse_train = math.sqrt(mean_squared_error(y_train, pred_train))    rmse_dev = math.sqrt(mean_squared_error(y_dev, pred_dev))    return clf, rmse_train, rmse_devdef run_lgb(x_train, x_dev, y_train, y_dev):    print('Training a lightgbm model')    params = {        "objective": "regression",        "metric": "rmse",        "num_leaves": 40,        "learning_rate": 0.005,        "bagging_fraction": 0.6,        "feature_fraction": 0.6,        "bagging_frequency": 6,        "bagging_seed": 42,        "verbosity": -1,        "seed": 42    }    lgtrain = lgb.Dataset(x_train, label=y_train.values.ravel())    lgval = lgb.Dataset(x_dev, label=y_dev.values.ravel())    evals_result = {}    model = lgb.train(params, lgtrain, 5000,                      valid_sets=[lgtrain, lgval],                      early_stopping_rounds=200,                      verbose_eval=150,                      evals_result=evals_result)    return modeldef run_lgb_model(x_train, x_dev, y_train, y_dev):    print('\n')    clf = run_lgb(x_train, x_dev, y_train, y_dev)    preds_train = clf.predict(x_train, num_iteration=clf.best_iteration)    preds_dev = clf.predict(x_dev, num_iteration=clf.best_iteration)    mse_train_reg = math.sqrt(mean_squared_error(y_train, preds_train))    mse_dev_reg = math.sqrt(mean_squared_error(y_dev, preds_dev))    print('RMSE on train is: {}'.format(mse_train_reg))    print('RMSE on DEV is: {}'.format(mse_dev_reg))    return clf, mse_train_reg, mse_dev_reg